// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

enum Providers {
  credentials
  discord
  google
  github
}

enum VisabiltyState {
  public
  unlisted
  prviate
}

enum Game {
  rocketleague
  valorant
  rust
  fortnite
  minecraft
  other
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  username    String      @unique
  email       String      @unique
  password    String?
  avatar      String      @default("https://avatars.dicebear.com/api/adventurer-neutral/default.svg")
  verified    Boolean
  providers   Provider[]
  providerIds Providers[]
  clips       Clip[]
  comments    Comment[]
  likes       Like[]
  userId      String?     @db.ObjectId
}

model Provider {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  providerName String
  username     String?
  image        String?
  user         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String  @db.ObjectId
}

model Verification {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  email String @unique
  jwt   String @unique
}

model Clip {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId     String         @db.ObjectId
  srcURL       String
  thumbnailURL String?
  visabilty    VisabiltyState
  game         Game
  title        String
  createdAt    DateTime       @default(now())
  comments     Comment[]
  likes        Like[]
}

model Comment {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  author    User      @relation(fields: [authorId], references: [id])
  authorId  String    @db.ObjectId
  clip      Clip      @relation(fields: [clipId], references: [id])
  clipId    String    @db.ObjectId
  message   String
  createdAt DateTime  @default(now())
  parent    Comment?  @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  children  Comment[] @relation("ParentChild")
  parentId  String    @db.ObjectId
  likes     Like[]
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  clip      Clip?    @relation(fields: [clipId], references: [id], onDelete: Cascade)
  clipId    String?  @db.ObjectId
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String?  @db.ObjectId
}
